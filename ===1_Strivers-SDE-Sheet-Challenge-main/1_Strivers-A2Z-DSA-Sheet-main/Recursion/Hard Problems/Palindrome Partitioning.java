/*
   Palindrome Partitioning
   Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.
   
   Note: A palindrome string is a string that reads the same backward as forward.
   
   Examples:
   
   Example 1:   
   Input: s = “aab”   
   Output: [ ["a","a","b"], ["aa","b"] ]	   
   Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.
    
   
   
   Example 2:   
   Input: s = “aabb”   
   Output: [ [“a”,”a”,”b”,”b”], [“aa”,”bb”], [“a”,”a”,”bb”], [“aa”,”b”,”b”] ] 

*/

import java.util.List;
import java.util.ArrayList;

public class Palindrome_Partitioning {
    public static List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> path = new ArrayList<>();
        func(0, s, path, res);
        return res;
    }
    public static void func(int index, String s, List<String> path, List<List<String>> res){
        if(index == s.length()){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i = index; i < s.length(); i++){
            if(isPalindrome(s, index, i)){
                path.add(s.substring(index, i + 1));
                func(i + 1, s, path, res);
                path.remove(path.size() - 1);
            }
        }
    }
    static boolean isPalindrome(String s, int start, int end){
        while(start <= end){
            if(s.charAt(start++) != s.charAt(end--)){
                return false;
            }
        }
        return true;
    }
    public static void main(String[] args) {
        String s = "aabb";
        System.out.println(partition(s));
    }
}
