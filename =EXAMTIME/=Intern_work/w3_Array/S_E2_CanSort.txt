## Can we  Sort 

You are given an array of integers \(a_1, a_2, \ldots, a_n\). To transform this array into a non-decreasing order, you can perform the following operation any number of times (including zero times):

- Choose a non-negative integer \(m\) such that \(2^m \leq n\).
- Subtract 1 from \(a_i\) for all integers \(i\) such that \(1 \leq i \leq 2^m\).

Your goal is to determine if it's possible to sort the array in non-decreasing order by performing some number of these operations.

An array is considered non-decreasing if \(a_i \leq a_{i+1}\) for all integers \(i\) such that \(1 \leq i \leq n-1\).

### Constraints
- \(1 \leq t \leq 10^4\)
- \(1 \leq n \leq 20\)
- \(0 \leq a_i \leq 1000\)

### Input
- The first line contains a single integer \(t\) — the number of test cases.
- The first line of each test case contains a single integer \(n\) — the length of the array.
- The second line of each test case contains \(n\) integers \(a_1, a_2, \ldots, a_n\) — the elements of the array.

### Output
For each test case, output "YES" if the array can be sorted in non-decreasing order using the described operations, and "NO" otherwise.

### Examples

**Input:**
8
5
1 2 3 4 5
5
6 5 3 4 4
9
6 5 5 7 5 6 6 8 7
4
4 3 2 1
6
2 2 4 5 3 2
8
1 3 17 19 27 57 179 13
5
3 17 57 179 92
10
1 2 3 4 0 6 7 8 9 10


**Output:**
YES
YES
YES
NO
NO
NO
YES
YES


### Explanation
- In the first test case, the array is already sorted in non-decreasing order, so no operations are needed.
- In the second test case, by performing the operation with \(m=1\) twice, the array can be transformed to \([4, 3, 3, 4, 4]\). Then, with \(m=0\) once, it becomes \([3, 3, 3, 4, 4]\), which is sorted.
- In the third test case, a series of operations can eventually sort the array.
- For some test cases, it may be impossible to sort the array using the given operations.

Can you determine the possibility of sorting the array for each test case?
