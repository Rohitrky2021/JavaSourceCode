/*
We are given a rod of size ‘N’. It can be cut into pieces. Each length of a piece has a
particular price given by the price array. Our task is to find the maximum revenue that
can be generated by selling the rod after cutting( if required) into pieces.
 */


public class _24rodCutting {
    public static void main(String[] args) {
        int[] arr = {2,5,7,8,10};
        int n = arr.length;

        int max = n;
        int[][] dp = new int[n][n+1];

        System.out.println("rec : " + rec(arr, n-1, max));
        System.out.println("memo : "+ memo(arr,n-1, max, dp));
        System.out.println("tabu : "+ tabu(arr, n, max));
        System.out.println("space opti " + space(arr, n));
    }

    public static int rec(int[] arr, int i, int max){
        if(i == 0) return arr[max-1];

        int cut = arr[max - i - 1] + rec(arr, i-1, i);
        int not = rec(arr, i-1, max);
        return Math.max(cut, not);
    }
    /*
     ? same as all Unbounded Methos 
     *  Just Add here which not given --> for (int i = 0; i < n; i++) {
     *            wt[i] = i + 1;
     *        }
     */
    public static int memo2(int[] arr, int[] wt, int n, int W, int[][] dp) { // Changed parameters from w, v to arr, wt
         if (n <= 0 || W == 0) {  
            return 0;
        }
         if (dp[n][W] != -1) {
            return dp[n][W];
        }
        int stole = 0;
        if (wt[n - 1] <= W)  
            stole = arr[n - 1] + memo2(arr, wt, n, W - wt[n - 1], dp);  
        int notStole = memo2(arr, wt, n - 1, W, dp); 

        return dp[n][W] = Math.max(stole, notStole);
    }
  public static int memo(int[] arr, int i, int max, int[][] dp){
        if(i == 0) return arr[max-1];
        if(dp[i][max] != 0) return dp[i][max];
        int cut = arr[max - i - 1] + memo(arr, i-1, i, dp);
        int not = memo(arr, i-1, max, dp);
        return dp[i][max] =  Math.max(cut, not);
    }

    public static int tabu(int[] arr, int n, int max){
        int [][] dp = new int[n][n+1];
        for(int i=1; i<=n; i++){
            dp[0][i] = arr[i-1];
        }

        for(int i=1; i<n; i++){
            for(int m = 0; m<=max; m++){
                int cut = m > i ? arr[m-i-1] + dp[i-1][i] : 0;
                int not = dp[i-1][m];
                dp[i][m] = Math.max(cut, not);
            }
        }
        return dp[n-1][max];
    }

    public static int space(int[] arr, int n){
        int prev[] = new int[n+1];
        int[] curr = new int[n+1];
        for(int i=1; i<=n; i++){
            prev[i] = arr[i-1];
        }
        for(int i =1; i<n; i++){
            for(int m=0; m<=n; m++){
                int cut = m > i ?  arr[m - i - 1] + curr[i] : 0;
                int not = prev[m];
                curr[m] = Math.max(cut, not);
            }
            prev = curr;
        }
        return curr[n];
    }

}
